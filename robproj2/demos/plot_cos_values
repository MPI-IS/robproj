#!/usr/bin/env python3

from robproj2 import DEFAULT_OBJECT_ID, DEFAULT_SEGMENT_ID, get_cos_value
import signal
from collections import deque
from queue import Queue
from typing import Type
import threading
import time
import matplotlib.pyplot as plt


def collect_data(
    q: Queue,
    frequency: float,
    segment_id: str,
    object_id: str,
    stop_event: threading.Event,
):
    period = 1.0 / frequency
    while not stop_event.is_set():
        q.put(get_cos_value(segment_id, object_id))
        time.sleep(period)


def plot_data(
    q: Queue, frequency: float, time_window: float, stop_event: threading.Event
):
    plt.ion()
    fig, ax = plt.subplots()
    # 200 data points, given 20Hz freq
    x, y = deque(maxlen=int(frequency * time_window)), deque(
        maxlen=int(frequency * time_window)
    )
    while not stop_event.is_set():
        if not q.empty():
            y.append(q.get())
            x.append(time.time())
            ax.clear()
            ax.plot(x, y)
            plt.draw()
            plt.pause(1.0 / frequency)
    plt.close("all")


def signal_handler(signum, frame):
    stop_event.set()


if __name__ == "__main__":
    frequency = 50.0
    time_window = 3.0
    q = Queue()
    stop_event = threading.Event()
    signal.signal(signal.SIGINT, signal_handler)
    data_thread = threading.Thread(
        target=collect_data,
        args=(q, frequency, DEFAULT_SEGMENT_ID, DEFAULT_OBJECT_ID, stop_event),
    )
    data_thread.start()
    plot_data(q, frequency, time_window, stop_event)
    data_thread.join()
